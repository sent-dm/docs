{
  "openapi": "3.0.0",
  "info": {
    "title": "Sent.dm API",
    "version": "1.0"
  },
  "servers": [
    {
      "url": "https://sent.dm/api"
    }
  ],
  "paths": {
    "/messages": {
      "post": {
        "summary": "Create a new message template",
        "operationId": "postMessage",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MessagePayload"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully created the message template",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "message": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string"
                        },
                        "title": {
                          "type": "string"
                        },
                        "content": {
                          "type": "string"
                        },
                        "siteId": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/messages/{siteId}": {
      "get": {
        "summary": "List messages for a site with optional pagination.",
        "operationId": "listMessagesBySiteId",
        "parameters": [
          {
            "in": "path",
            "name": "siteId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The site ID"
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "description": "Page number for pagination"
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "type": "integer",
              "default": 10
            },
            "description": "Number of items per page"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of messages for the site.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "page": {
                      "type": "integer"
                    },
                    "pageSize": {
                      "type": "integer"
                    },
                    "totalCount": {
                      "type": "integer"
                    },
                    "messages": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Message"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/messages/{siteId}/{messageId}": {
      "get": {
        "summary": "Get a single message by site ID and message ID.",
        "operationId": "getMessageBySiteIdAndMessageId",
        "parameters": [
          {
            "in": "path",
            "name": "siteId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The site ID"
          },
          {
            "in": "path",
            "name": "messageId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The message ID"
          }
        ],
        "responses": {
          "200": {
            "description": "A single message detail.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/messages/send": {
      "post": {
        "summary": "Send message operation for immediate or scheduled delivery.",
        "operationId": "Send Message",
        "security": [
          {
            "APIKeyAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SendMessagePayload"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Message payload queued for processing",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "message": {
                      "type": "string"
                    },
                    "transactionId": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/messages/send/{siteId}/{transactionId}": {
      "get": {
        "summary": "Get the status of a message send operation",
        "operationId": "getSendStatus",
        "parameters": [
          {
            "name": "siteId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Unique identifier for the site"
          },
          {
            "name": "transactionId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Unique identifier for the send operation"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/MessageJobPayloadResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/subscribers": {
      "post": {
        "summary": "Create a new subscriber contact",
        "operationId": "postSubscriber",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SubscriberPayload"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Subscriber has been successfully created or already exists.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriberResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/subscribers/{siteId}/{subscriberId}": {
      "get": {
        "summary": "Retrieve a subscriber's details by ID",
        "operationId": "getSubscriber",
        "parameters": [
          {
            "name": "siteId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "subscriberId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "includeEvents",
            "in": "query",
            "required": false,
            "description": "Include associated events in the response",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "includeMessages",
            "in": "query",
            "required": false,
            "description": "Include associated messages in the response",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Details of the subscriber",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriberWithOptionalFields"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "put": {
        "summary": "Update subscriber details",
        "operationId": "updateSubscriber",
        "parameters": [
          {
            "name": "siteId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "subscriberId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "defaultChannel": {
                    "$ref": "#/components/schemas/SubscriptionChannel"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Subscriber updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriberBase"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "summary": "Delete a subscriber",
        "operationId": "deleteSubscriber",
        "parameters": [
          {
            "name": "siteId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "subscriberId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Subscriber deleted successfully"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "APIKeyAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "API Key"
      }
    },
    "schemas": {
      "Message": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "siteId": {
            "type": "string"
          },
          "content": {
            "type": "string"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "templates": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MessageTemplate"
            }
          }
        }
      },
      "MessageTemplate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "messageId": {
            "type": "string"
          },
          "channelType": {
            "$ref": "#/components/schemas/SubscriptionChannel"
          },
          "content": {
            "type": "object",
            "additionalProperties": true
          },
          "status": {
            "type": "string"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "SubscriptionChannel": {
        "type": "string",
        "enum": ["sms", "whatsapp", "telegram", "imessage"]
      },
      "MessagePayload": {
        "type": "object",
        "properties": {
          "siteId": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "content": {
            "type": "string"
          }
        },
        "required": ["siteId", "name", "content"]
      },
      "SubscriberPayload": {
        "type": "object",
        "properties": {
          "phoneNumber": {
            "type": "string"
          },
          "siteId": {
            "type": "string"
          }
        },
        "required": ["phoneNumber", "siteId"]
      },
      "MessageResponseSuccess": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "message": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "title": {
                "type": "string"
              },
              "content": {
                "type": "string"
              },
              "siteId": {
                "type": "string"
              }
            }
          },
          "publishQstash": {
            "type": "boolean"
          }
        }
      },
      "SendMessagePayload": {
        "type": "object",
        "properties": {
          "siteId": {
            "type": "string"
          },
          "recipients": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "messageId": {
            "type": "string"
          },
          "senderPhoneNumber": {
            "type": "string",
            "nullable": true
          },
          "sendAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "required": ["siteId", "recipients", "messageId"]
      },
      "MessageJobPayloadResponse": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "example": "cHJvZHVjdEBwcm94aW5jLmNvbS5hd",
              "description": "The unique identifier for the message job payload"
            },
            "messages": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "transactionId": {
                    "type": "string",
                    "example": "cHJvZHVjdEBwcm94aW5jLmNvbS5hd",
                    "description": "ID of the message action operation"
                  },
                  "to": {
                    "type": "string",
                    "example": "+19715555555",
                    "description": "Phone number of the recipient"
                  },
                  "recipientId": {
                    "type": "string",
                    "example": "1",
                    "description": "ID of the recipient's subscription"
                  },
                  "channel": {
                    "type": "string",
                    "example": "sms",
                    "description": "Channel type for the message"
                  },
                  "status": {
                    "type": "string",
                    "example": "sent",
                    "description": "Status of the message"
                  },
                  "lastUpdatedAt": {
                    "type": "string",
                    "format": "date-time",
                    "example": "2023-10-12T07:20:50.52Z",
                    "description": "The last updated timestamp of the message status"
                  }
                }
              }
            }
          }
        }
      },
      "Subscriber": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique identifier for the subscriber, automatically generated and managed."
          },
          "phoneNumber": {
            "type": "string",
            "description": "The phone number of the subscriber, which must be unique across all subscribers."
          },
          "defaultChannel": {
            "$ref": "#/components/schemas/SubscriptionChannel"
          },
          "SubscriberChannels": {
            "type": "array",
            "description": "The list of all subscribed channels by the subscriber, providing details on the status and specific configurations of each.",
            "items": {
              "$ref": "#/components/schemas/SubscriberChannels"
            }
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "The timestamp indicating when the subscriber was first created in the system, formatted as a date-time string."
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "The timestamp indicating when the subscriber information was last updated, formatted as a date-time string."
          },
          "countryCode": {
            "type": "string",
            "description": "The country code associated with the subscriber's phone number."
          },
          "countryIso": {
            "type": "string",
            "description": "The ISO country code representing the subscriber's country of residence."
          },
          "verificationStatus": {
            "type": "string",
            "enum": ["pending", "active", "inactive"],
            "description": "The current verification status of the subscriber."
          },
          "Events": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Event"
            }
          },
          "messages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MessageAction"
            }
          }
        }
      },
      "SubscriberResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "subscriberId": {
            "type": "string",
            "description": "The unique identifier of the subscriber"
          }
        }
      },
      "Event": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique identifier for the event, automatically generated and managed."
          },
          "name": {
            "type": "string",
            "description": "The name of the event."
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "description": "The timestamp when the event occurred, automatically set to the current time."
          },
          "channelType": {
            "type": "string",
            "description": "The communication channel type used during the event."
          },
          "properties": {
            "type": "object",
            "description": "Additional JSON formatted properties related to the event"
          }
        }
      },
      "SubscriberChannels": {
        "type": "object",
        "properties": {
          "channel": {
            "$ref": "#/components/schemas/SubscriptionChannel"
          },
          "valid": {
            "type": "string",
            "enum": ["pending", "valid", "invalid"],
            "default": "pending",
            "description": "Current status of the channel, automatically set to pending."
          }
        }
      },
      "MessageAction": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier of the message."
          },
          "title": {
            "type": "string",
            "description": "Title or subject of the message."
          },
          "content": {
            "type": "string",
            "description": "The actual content of the message."
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "description": "The date and time when the message was sent or received."
          }
        }
      },
      "SubscriberBase": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique identifier for the subscriber, automatically generated and managed."
          },
          "phoneNumber": {
            "type": "string",
            "description": "The phone number of the subscriber, which must be unique across all subscribers."
          },
          "defaultChannel": {
            "$ref": "#/components/schemas/SubscriptionChannel"
          },
          "SubscriberChannels": {
            "type": "array",
            "description": "The list of all subscribed channels by the subscriber, providing details on the status and specific configurations of each.",
            "items": {
              "$ref": "#/components/schemas/SubscriberChannels"
            }
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "The timestamp indicating when the subscriber was first created in the system, formatted as a date-time string."
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "The timestamp indicating when the subscriber information was last updated, formatted as a date-time string."
          },
          "countryCode": {
            "type": "string",
            "description": "The country code associated with the subscriber's phone number."
          },
          "countryIso": {
            "type": "string",
            "description": "The ISO country code representing the subscriber's country of residence."
          },
          "verificationStatus": {
            "type": "string",
            "enum": ["pending", "active", "inactive"],
            "description": "The current verification status of the subscriber."
          }
        }
      },
      "SubscriberWithOptionalFields": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SubscriberBase"
          },
          {
            "type": "object",
            "properties": {
              "Events": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Event"
                },
                "description": "A list of events associated with the subscriber"
              },
              "messages": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/MessageAction"
                },
                "description": "A list of messages associated with the subscriber"
              }
            }
          }
        ]
      }
    },
    "responses": {
      "MessageJobPayloadResponse": {
        "description": "Array of message job payloads",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/MessageJobPayloadResponse"
            }
          }
        }
      },
      "BadRequest": {
        "description": "Bad Request - The request is malformed.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "doc_url": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "example": {
              "error": {
                "code": "bad_request",
                "message": "The request is malformed, either missing required fields, using wrong datatypes, or being syntactically incorrect.",
                "doc_url": "https://docs.sent.dm/api-reference/errors#bad_request"
              }
            }
          }
        }
      },
      "Unauthorized": {
        "description": "Unauthorized - Authentication credentials were not provided or are invalid.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "doc_url": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "example": {
              "error": {
                "code": "unauthorized",
                "message": "Authentication credentials were not provided or are invalid.",
                "doc_url": "https://docs.sent.dm/api-reference/errors#unauthorized"
              }
            }
          }
        }
      },
      "Forbidden": {
        "description": "Forbidden - The client lacks proper permission.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "doc_url": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "example": {
              "error": {
                "code": "forbidden",
                "message": "You do not have the necessary permissions for the resource.",
                "doc_url": "https://docs.sent.dm/api-reference/errors#forbidden"
              }
            }
          }
        }
      },
      "NotFound": {
        "description": "Not Found - The requested resource could not be found.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "doc_url": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "example": {
              "error": {
                "code": "not_found",
                "message": "The requested resource could not be found.",
                "doc_url": "https://docs.sent.dm/api-reference/errors#not_found"
              }
            }
          }
        }
      },
      "InternalServerError": {
        "description": "Internal Server Error - An unexpected error that prevented the server from fulfilling the request.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "doc_url": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "example": {
              "error": {
                "code": "internal_server_error",
                "message": "An unexpected error has occurred that prevented the server from fulfilling the request.",
                "doc_url": "https://docs.sent.dm/api-reference/errors#internal_server_error"
              }
            }
          }
        }
      }
    }
  },
  "security": [
    {
      "APIKeyAuth": []
    }
  ]
}
